// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Paraglider.Data;

#nullable disable

namespace Paraglider.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221112184407_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.Album", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.BanquetHall", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AlbumId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("ExternalInfoId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("WeddingPlanningId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("CityId");

                    b.HasIndex("ExternalInfoId");

                    b.HasIndex("WeddingPlanningId");

                    b.ToTable("BanquetHalls");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("WeddingPlanningId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WeddingPlanningId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.Catering", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AlbumId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("ExternalInfoId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("WeddingPlanningId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("CityId");

                    b.HasIndex("ExternalInfoId");

                    b.HasIndex("WeddingPlanningId");

                    b.ToTable("Caterings");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.Confectioner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AlbumId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("ExternalInfoId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("WeddingPlanningId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("CityId");

                    b.HasIndex("ExternalInfoId");

                    b.HasIndex("WeddingPlanningId");

                    b.ToTable("Confectioners");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.Decorator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AlbumId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("ExternalInfoId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("WeddingPlanningId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("CityId");

                    b.HasIndex("ExternalInfoId");

                    b.HasIndex("WeddingPlanningId");

                    b.ToTable("Decorators");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.Dj", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AlbumId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("ExternalInfoId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("WeddingPlanningId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("CityId");

                    b.HasIndex("ExternalInfoId");

                    b.HasIndex("WeddingPlanningId");

                    b.ToTable("Djs");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.ExternalInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ApplicationUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ExternalProvider")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasAlternateKey("ExternalProvider", "ExternalId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("ExternalInfo");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.Limousine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AlbumId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Capacity")
                        .HasColumnType("integer");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("ExternalInfoId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ManufactureYear")
                        .HasColumnType("timestamp with time zone");

                    b.Property<TimeSpan?>("MinRentLength")
                        .HasColumnType("interval");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("WeddingPlanningId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("CityId");

                    b.HasIndex("ExternalInfoId");

                    b.HasIndex("WeddingPlanningId");

                    b.ToTable("Limousines");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.Media", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AlbumId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.ToTable("Medias");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Sum")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("WeddingComponentDescId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WeddingComponentDescId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.PhotoStudio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AlbumId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("ExternalInfoId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("WeddingPlanningId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("CityId");

                    b.HasIndex("ExternalInfoId");

                    b.HasIndex("WeddingPlanningId");

                    b.ToTable("PhotoStudios");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.Photographer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AlbumId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("ExternalInfoId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("WeddingPlanningId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("CityId");

                    b.HasIndex("ExternalInfoId");

                    b.HasIndex("WeddingPlanningId");

                    b.ToTable("Photographers");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.Premise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AlbumId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BanquetHallId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<decimal?>("MinimalPrice")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("BanquetHallId");

                    b.ToTable("Premises");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.Registrar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AlbumId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("ExternalInfoId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("WeddingPlanningId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("CityId");

                    b.HasIndex("ExternalInfoId");

                    b.HasIndex("WeddingPlanningId");

                    b.ToTable("Registrars");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("BanquetHallId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CateringId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ConfectionerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DecoratorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DjId")
                        .HasColumnType("uuid");

                    b.Property<double>("Evaluation")
                        .HasColumnType("double precision");

                    b.Property<Guid?>("LimousineId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PhotoStudioId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PhotographerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RegistrarId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("StylistId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<Guid?>("ToastmasterId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("VideographerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BanquetHallId");

                    b.HasIndex("CateringId");

                    b.HasIndex("ConfectionerId");

                    b.HasIndex("DecoratorId");

                    b.HasIndex("DjId");

                    b.HasIndex("LimousineId");

                    b.HasIndex("PhotoStudioId");

                    b.HasIndex("PhotographerId");

                    b.HasIndex("RegistrarId");

                    b.HasIndex("StylistId");

                    b.HasIndex("ToastmasterId");

                    b.HasIndex("VideographerId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CateringId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ConfectionerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DecoratorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid?>("DjId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("PhotoStudioId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PhotographerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RegistrarId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("StylistId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ToastmasterId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("VideographerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CateringId");

                    b.HasIndex("ConfectionerId");

                    b.HasIndex("DecoratorId");

                    b.HasIndex("DjId");

                    b.HasIndex("PhotoStudioId");

                    b.HasIndex("PhotographerId");

                    b.HasIndex("RegistrarId");

                    b.HasIndex("StylistId");

                    b.HasIndex("ToastmasterId");

                    b.HasIndex("VideographerId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.Stylist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AlbumId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("ExternalInfoId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("WeddingPlanningId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("CityId");

                    b.HasIndex("ExternalInfoId");

                    b.HasIndex("WeddingPlanningId");

                    b.ToTable("Stylists");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.Toastmaster", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AlbumId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("ExternalInfoId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("WeddingPlanningId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("CityId");

                    b.HasIndex("ExternalInfoId");

                    b.HasIndex("WeddingPlanningId");

                    b.ToTable("Toastmasters");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.Videographer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AlbumId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("ExternalInfoId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("WeddingPlanningId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("CityId");

                    b.HasIndex("ExternalInfoId");

                    b.HasIndex("WeddingPlanningId");

                    b.ToTable("Videographers");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.WeddingComponentDesc", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConfigurationItemId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("WeddingComponentsDesc");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.WeddingPlanning", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ApplicationUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("WeddingPlannings");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Paraglider.Domain.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Paraglider.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Paraglider.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Paraglider.Domain.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Paraglider.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Paraglider.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.ApplicationUser", b =>
                {
                    b.HasOne("Paraglider.Domain.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.BanquetHall", b =>
                {
                    b.HasOne("Paraglider.Domain.Entities.Album", "Album")
                        .WithMany()
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Paraglider.Domain.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Paraglider.Domain.Entities.ExternalInfo", "ExternalInfo")
                        .WithMany()
                        .HasForeignKey("ExternalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Paraglider.Domain.Entities.WeddingPlanning", null)
                        .WithMany("BanquetHalls")
                        .HasForeignKey("WeddingPlanningId");

                    b.OwnsOne("Paraglider.Domain.ValueObjects.Contacts", "Contacts", b1 =>
                        {
                            b1.Property<Guid>("BanquetHallId")
                                .HasColumnType("uuid");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("PhoneNumber");

                            b1.HasKey("BanquetHallId");

                            b1.ToTable("BanquetHalls");

                            b1.WithOwner()
                                .HasForeignKey("BanquetHallId");
                        });

                    b.Navigation("Album");

                    b.Navigation("City");

                    b.Navigation("Contacts")
                        .IsRequired();

                    b.Navigation("ExternalInfo");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.Category", b =>
                {
                    b.HasOne("Paraglider.Domain.Entities.WeddingPlanning", null)
                        .WithMany("SelectedCategories")
                        .HasForeignKey("WeddingPlanningId");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.Catering", b =>
                {
                    b.HasOne("Paraglider.Domain.Entities.Album", "Album")
                        .WithMany()
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Paraglider.Domain.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Paraglider.Domain.Entities.ExternalInfo", "ExternalInfo")
                        .WithMany()
                        .HasForeignKey("ExternalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Paraglider.Domain.Entities.WeddingPlanning", null)
                        .WithMany("Caterings")
                        .HasForeignKey("WeddingPlanningId");

                    b.OwnsOne("Paraglider.Domain.ValueObjects.Contacts", "Contacts", b1 =>
                        {
                            b1.Property<Guid>("CateringId")
                                .HasColumnType("uuid");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("PhoneNumber");

                            b1.HasKey("CateringId");

                            b1.ToTable("Caterings");

                            b1.WithOwner()
                                .HasForeignKey("CateringId");
                        });

                    b.Navigation("Album");

                    b.Navigation("City");

                    b.Navigation("Contacts")
                        .IsRequired();

                    b.Navigation("ExternalInfo");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.Confectioner", b =>
                {
                    b.HasOne("Paraglider.Domain.Entities.Album", "Album")
                        .WithMany()
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Paraglider.Domain.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Paraglider.Domain.Entities.ExternalInfo", "ExternalInfo")
                        .WithMany()
                        .HasForeignKey("ExternalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Paraglider.Domain.Entities.WeddingPlanning", null)
                        .WithMany("Confectioners")
                        .HasForeignKey("WeddingPlanningId");

                    b.OwnsOne("Paraglider.Domain.ValueObjects.Contacts", "Contacts", b1 =>
                        {
                            b1.Property<Guid>("ConfectionerId")
                                .HasColumnType("uuid");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("PhoneNumber");

                            b1.HasKey("ConfectionerId");

                            b1.ToTable("Confectioners");

                            b1.WithOwner()
                                .HasForeignKey("ConfectionerId");
                        });

                    b.Navigation("Album");

                    b.Navigation("City");

                    b.Navigation("Contacts")
                        .IsRequired();

                    b.Navigation("ExternalInfo");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.Decorator", b =>
                {
                    b.HasOne("Paraglider.Domain.Entities.Album", "Album")
                        .WithMany()
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Paraglider.Domain.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Paraglider.Domain.Entities.ExternalInfo", "ExternalInfo")
                        .WithMany()
                        .HasForeignKey("ExternalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Paraglider.Domain.Entities.WeddingPlanning", null)
                        .WithMany("Decorators")
                        .HasForeignKey("WeddingPlanningId");

                    b.OwnsOne("Paraglider.Domain.ValueObjects.Contacts", "Contacts", b1 =>
                        {
                            b1.Property<Guid>("DecoratorId")
                                .HasColumnType("uuid");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("PhoneNumber");

                            b1.HasKey("DecoratorId");

                            b1.ToTable("Decorators");

                            b1.WithOwner()
                                .HasForeignKey("DecoratorId");
                        });

                    b.Navigation("Album");

                    b.Navigation("City");

                    b.Navigation("Contacts")
                        .IsRequired();

                    b.Navigation("ExternalInfo");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.Dj", b =>
                {
                    b.HasOne("Paraglider.Domain.Entities.Album", "Album")
                        .WithMany()
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Paraglider.Domain.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Paraglider.Domain.Entities.ExternalInfo", "ExternalInfo")
                        .WithMany()
                        .HasForeignKey("ExternalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Paraglider.Domain.Entities.WeddingPlanning", null)
                        .WithMany("Djs")
                        .HasForeignKey("WeddingPlanningId");

                    b.OwnsOne("Paraglider.Domain.ValueObjects.Contacts", "Contacts", b1 =>
                        {
                            b1.Property<Guid>("DjId")
                                .HasColumnType("uuid");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("PhoneNumber");

                            b1.HasKey("DjId");

                            b1.ToTable("Djs");

                            b1.WithOwner()
                                .HasForeignKey("DjId");
                        });

                    b.Navigation("Album");

                    b.Navigation("City");

                    b.Navigation("Contacts")
                        .IsRequired();

                    b.Navigation("ExternalInfo");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.ExternalInfo", b =>
                {
                    b.HasOne("Paraglider.Domain.Entities.ApplicationUser", null)
                        .WithMany("ExternalAuthInfo")
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.Limousine", b =>
                {
                    b.HasOne("Paraglider.Domain.Entities.Album", "Album")
                        .WithMany()
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Paraglider.Domain.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Paraglider.Domain.Entities.ExternalInfo", "ExternalInfo")
                        .WithMany()
                        .HasForeignKey("ExternalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Paraglider.Domain.Entities.WeddingPlanning", null)
                        .WithMany("Limousines")
                        .HasForeignKey("WeddingPlanningId");

                    b.OwnsOne("Paraglider.Domain.ValueObjects.Contacts", "Contacts", b1 =>
                        {
                            b1.Property<Guid>("LimousineId")
                                .HasColumnType("uuid");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("PhoneNumber");

                            b1.HasKey("LimousineId");

                            b1.ToTable("Limousines");

                            b1.WithOwner()
                                .HasForeignKey("LimousineId");
                        });

                    b.Navigation("Album");

                    b.Navigation("City");

                    b.Navigation("Contacts")
                        .IsRequired();

                    b.Navigation("ExternalInfo");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.Media", b =>
                {
                    b.HasOne("Paraglider.Domain.Entities.Album", null)
                        .WithMany("Media")
                        .HasForeignKey("AlbumId");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.Payment", b =>
                {
                    b.HasOne("Paraglider.Domain.Entities.WeddingComponentDesc", null)
                        .WithMany("Payments")
                        .HasForeignKey("WeddingComponentDescId");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.PhotoStudio", b =>
                {
                    b.HasOne("Paraglider.Domain.Entities.Album", "Album")
                        .WithMany()
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Paraglider.Domain.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Paraglider.Domain.Entities.ExternalInfo", "ExternalInfo")
                        .WithMany()
                        .HasForeignKey("ExternalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Paraglider.Domain.Entities.WeddingPlanning", null)
                        .WithMany("PhotoStudios")
                        .HasForeignKey("WeddingPlanningId");

                    b.OwnsOne("Paraglider.Domain.ValueObjects.Contacts", "Contacts", b1 =>
                        {
                            b1.Property<Guid>("PhotoStudioId")
                                .HasColumnType("uuid");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("PhoneNumber");

                            b1.HasKey("PhotoStudioId");

                            b1.ToTable("PhotoStudios");

                            b1.WithOwner()
                                .HasForeignKey("PhotoStudioId");
                        });

                    b.Navigation("Album");

                    b.Navigation("City");

                    b.Navigation("Contacts")
                        .IsRequired();

                    b.Navigation("ExternalInfo");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.Photographer", b =>
                {
                    b.HasOne("Paraglider.Domain.Entities.Album", "Album")
                        .WithMany()
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Paraglider.Domain.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Paraglider.Domain.Entities.ExternalInfo", "ExternalInfo")
                        .WithMany()
                        .HasForeignKey("ExternalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Paraglider.Domain.Entities.WeddingPlanning", null)
                        .WithMany("Photographers")
                        .HasForeignKey("WeddingPlanningId");

                    b.OwnsOne("Paraglider.Domain.ValueObjects.Contacts", "Contacts", b1 =>
                        {
                            b1.Property<Guid>("PhotographerId")
                                .HasColumnType("uuid");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("PhoneNumber");

                            b1.HasKey("PhotographerId");

                            b1.ToTable("Photographers");

                            b1.WithOwner()
                                .HasForeignKey("PhotographerId");
                        });

                    b.Navigation("Album");

                    b.Navigation("City");

                    b.Navigation("Contacts")
                        .IsRequired();

                    b.Navigation("ExternalInfo");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.Premise", b =>
                {
                    b.HasOne("Paraglider.Domain.Entities.Album", "Album")
                        .WithMany()
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Paraglider.Domain.Entities.BanquetHall", null)
                        .WithMany("Premises")
                        .HasForeignKey("BanquetHallId");

                    b.OwnsOne("Paraglider.Domain.ValueObjects.Capacity", "Capacity", b1 =>
                        {
                            b1.Property<Guid>("PremiseId")
                                .HasColumnType("uuid");

                            b1.Property<int?>("Max")
                                .HasColumnType("integer")
                                .HasColumnName("MaxCapacity");

                            b1.Property<int?>("Min")
                                .HasColumnType("integer")
                                .HasColumnName("MinCapacity");

                            b1.HasKey("PremiseId");

                            b1.ToTable("Premises");

                            b1.WithOwner()
                                .HasForeignKey("PremiseId");
                        });

                    b.OwnsOne("Paraglider.Domain.ValueObjects.PremiseRentalPrice", "RentalPrice", b1 =>
                        {
                            b1.Property<Guid>("PremiseId")
                                .HasColumnType("uuid");

                            b1.Property<decimal?>("PricePerPerson")
                                .HasColumnType("numeric")
                                .HasColumnName("RentalPricePerPerson");

                            b1.Property<decimal?>("RentalPrice")
                                .HasColumnType("numeric")
                                .HasColumnName("RentalPrice");

                            b1.HasKey("PremiseId");

                            b1.ToTable("Premises");

                            b1.WithOwner()
                                .HasForeignKey("PremiseId");
                        });

                    b.Navigation("Album");

                    b.Navigation("Capacity")
                        .IsRequired();

                    b.Navigation("RentalPrice")
                        .IsRequired();
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.Registrar", b =>
                {
                    b.HasOne("Paraglider.Domain.Entities.Album", "Album")
                        .WithMany()
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Paraglider.Domain.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Paraglider.Domain.Entities.ExternalInfo", "ExternalInfo")
                        .WithMany()
                        .HasForeignKey("ExternalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Paraglider.Domain.Entities.WeddingPlanning", null)
                        .WithMany("Registrars")
                        .HasForeignKey("WeddingPlanningId");

                    b.OwnsOne("Paraglider.Domain.ValueObjects.Contacts", "Contacts", b1 =>
                        {
                            b1.Property<Guid>("RegistrarId")
                                .HasColumnType("uuid");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("PhoneNumber");

                            b1.HasKey("RegistrarId");

                            b1.ToTable("Registrars");

                            b1.WithOwner()
                                .HasForeignKey("RegistrarId");
                        });

                    b.Navigation("Album");

                    b.Navigation("City");

                    b.Navigation("Contacts")
                        .IsRequired();

                    b.Navigation("ExternalInfo");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.Review", b =>
                {
                    b.HasOne("Paraglider.Domain.Entities.BanquetHall", null)
                        .WithMany("Reviews")
                        .HasForeignKey("BanquetHallId");

                    b.HasOne("Paraglider.Domain.Entities.Catering", null)
                        .WithMany("Reviews")
                        .HasForeignKey("CateringId");

                    b.HasOne("Paraglider.Domain.Entities.Confectioner", null)
                        .WithMany("Reviews")
                        .HasForeignKey("ConfectionerId");

                    b.HasOne("Paraglider.Domain.Entities.Decorator", null)
                        .WithMany("Reviews")
                        .HasForeignKey("DecoratorId");

                    b.HasOne("Paraglider.Domain.Entities.Dj", null)
                        .WithMany("Reviews")
                        .HasForeignKey("DjId");

                    b.HasOne("Paraglider.Domain.Entities.Limousine", null)
                        .WithMany("Reviews")
                        .HasForeignKey("LimousineId");

                    b.HasOne("Paraglider.Domain.Entities.PhotoStudio", null)
                        .WithMany("Reviews")
                        .HasForeignKey("PhotoStudioId");

                    b.HasOne("Paraglider.Domain.Entities.Photographer", null)
                        .WithMany("Reviews")
                        .HasForeignKey("PhotographerId");

                    b.HasOne("Paraglider.Domain.Entities.Registrar", null)
                        .WithMany("Reviews")
                        .HasForeignKey("RegistrarId");

                    b.HasOne("Paraglider.Domain.Entities.Stylist", null)
                        .WithMany("Reviews")
                        .HasForeignKey("StylistId");

                    b.HasOne("Paraglider.Domain.Entities.Toastmaster", null)
                        .WithMany("Reviews")
                        .HasForeignKey("ToastmasterId");

                    b.HasOne("Paraglider.Domain.Entities.Videographer", null)
                        .WithMany("Reviews")
                        .HasForeignKey("VideographerId");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.Service", b =>
                {
                    b.HasOne("Paraglider.Domain.Entities.Catering", null)
                        .WithMany("Services")
                        .HasForeignKey("CateringId");

                    b.HasOne("Paraglider.Domain.Entities.Confectioner", null)
                        .WithMany("Services")
                        .HasForeignKey("ConfectionerId");

                    b.HasOne("Paraglider.Domain.Entities.Decorator", null)
                        .WithMany("Services")
                        .HasForeignKey("DecoratorId");

                    b.HasOne("Paraglider.Domain.Entities.Dj", null)
                        .WithMany("Services")
                        .HasForeignKey("DjId");

                    b.HasOne("Paraglider.Domain.Entities.PhotoStudio", null)
                        .WithMany("Services")
                        .HasForeignKey("PhotoStudioId");

                    b.HasOne("Paraglider.Domain.Entities.Photographer", null)
                        .WithMany("Services")
                        .HasForeignKey("PhotographerId");

                    b.HasOne("Paraglider.Domain.Entities.Registrar", null)
                        .WithMany("Services")
                        .HasForeignKey("RegistrarId");

                    b.HasOne("Paraglider.Domain.Entities.Stylist", null)
                        .WithMany("Services")
                        .HasForeignKey("StylistId");

                    b.HasOne("Paraglider.Domain.Entities.Toastmaster", null)
                        .WithMany("Services")
                        .HasForeignKey("ToastmasterId");

                    b.HasOne("Paraglider.Domain.Entities.Videographer", null)
                        .WithMany("Services")
                        .HasForeignKey("VideographerId");

                    b.OwnsOne("Paraglider.Domain.ValueObjects.Price", "Price", b1 =>
                        {
                            b1.Property<Guid>("ServiceId")
                                .HasColumnType("uuid");

                            b1.Property<decimal?>("Max")
                                .HasColumnType("numeric")
                                .HasColumnName("MaxPrice");

                            b1.Property<decimal?>("Min")
                                .HasColumnType("numeric")
                                .HasColumnName("MinPrice");

                            b1.HasKey("ServiceId");

                            b1.ToTable("Services");

                            b1.WithOwner()
                                .HasForeignKey("ServiceId");
                        });

                    b.Navigation("Price")
                        .IsRequired();
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.Stylist", b =>
                {
                    b.HasOne("Paraglider.Domain.Entities.Album", "Album")
                        .WithMany()
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Paraglider.Domain.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Paraglider.Domain.Entities.ExternalInfo", "ExternalInfo")
                        .WithMany()
                        .HasForeignKey("ExternalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Paraglider.Domain.Entities.WeddingPlanning", null)
                        .WithMany("Stylists")
                        .HasForeignKey("WeddingPlanningId");

                    b.OwnsOne("Paraglider.Domain.ValueObjects.Contacts", "Contacts", b1 =>
                        {
                            b1.Property<Guid>("StylistId")
                                .HasColumnType("uuid");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("PhoneNumber");

                            b1.HasKey("StylistId");

                            b1.ToTable("Stylists");

                            b1.WithOwner()
                                .HasForeignKey("StylistId");
                        });

                    b.Navigation("Album");

                    b.Navigation("City");

                    b.Navigation("Contacts")
                        .IsRequired();

                    b.Navigation("ExternalInfo");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.Toastmaster", b =>
                {
                    b.HasOne("Paraglider.Domain.Entities.Album", "Album")
                        .WithMany()
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Paraglider.Domain.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Paraglider.Domain.Entities.ExternalInfo", "ExternalInfo")
                        .WithMany()
                        .HasForeignKey("ExternalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Paraglider.Domain.Entities.WeddingPlanning", null)
                        .WithMany("Toastmasters")
                        .HasForeignKey("WeddingPlanningId");

                    b.OwnsOne("Paraglider.Domain.ValueObjects.Contacts", "Contacts", b1 =>
                        {
                            b1.Property<Guid>("ToastmasterId")
                                .HasColumnType("uuid");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("PhoneNumber");

                            b1.HasKey("ToastmasterId");

                            b1.ToTable("Toastmasters");

                            b1.WithOwner()
                                .HasForeignKey("ToastmasterId");
                        });

                    b.Navigation("Album");

                    b.Navigation("City");

                    b.Navigation("Contacts")
                        .IsRequired();

                    b.Navigation("ExternalInfo");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.Videographer", b =>
                {
                    b.HasOne("Paraglider.Domain.Entities.Album", "Album")
                        .WithMany()
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Paraglider.Domain.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Paraglider.Domain.Entities.ExternalInfo", "ExternalInfo")
                        .WithMany()
                        .HasForeignKey("ExternalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Paraglider.Domain.Entities.WeddingPlanning", null)
                        .WithMany("Videographers")
                        .HasForeignKey("WeddingPlanningId");

                    b.OwnsOne("Paraglider.Domain.ValueObjects.Contacts", "Contacts", b1 =>
                        {
                            b1.Property<Guid>("VideographerId")
                                .HasColumnType("uuid");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("PhoneNumber");

                            b1.HasKey("VideographerId");

                            b1.ToTable("Videographers");

                            b1.WithOwner()
                                .HasForeignKey("VideographerId");
                        });

                    b.Navigation("Album");

                    b.Navigation("City");

                    b.Navigation("Contacts")
                        .IsRequired();

                    b.Navigation("ExternalInfo");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.WeddingComponentDesc", b =>
                {
                    b.OwnsOne("Paraglider.Domain.ValueObjects.TimeStamp", "TimeStamp", b1 =>
                        {
                            b1.Property<Guid>("WeddingComponentDescId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("WeddingComponentDescId");

                            b1.ToTable("WeddingComponentsDesc");

                            b1.WithOwner()
                                .HasForeignKey("WeddingComponentDescId");

                            b1.OwnsOne("Paraglider.Domain.ValueObjects.TimeOfDay", "ExactTime", b2 =>
                                {
                                    b2.Property<Guid>("TimeStampWeddingComponentDescId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("Hour")
                                        .HasColumnType("integer")
                                        .HasColumnName("ExactTime_Hour");

                                    b2.Property<int>("Minute")
                                        .HasColumnType("integer")
                                        .HasColumnName("ExactTime_Minute");

                                    b2.Property<int>("Second")
                                        .HasColumnType("integer")
                                        .HasColumnName("ExactTime_Second");

                                    b2.HasKey("TimeStampWeddingComponentDescId");

                                    b2.ToTable("WeddingComponentsDesc");

                                    b2.WithOwner()
                                        .HasForeignKey("TimeStampWeddingComponentDescId");
                                });

                            b1.OwnsOne("Paraglider.Domain.ValueObjects.TimeOfDay", "IntervalEnd", b2 =>
                                {
                                    b2.Property<Guid>("TimeStampWeddingComponentDescId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("Hour")
                                        .HasColumnType("integer")
                                        .HasColumnName("IntervalEnd_Hour");

                                    b2.Property<int>("Minute")
                                        .HasColumnType("integer")
                                        .HasColumnName("IntervalEnd_Minute");

                                    b2.Property<int>("Second")
                                        .HasColumnType("integer")
                                        .HasColumnName("IntervalEnd_Second");

                                    b2.HasKey("TimeStampWeddingComponentDescId");

                                    b2.ToTable("WeddingComponentsDesc");

                                    b2.WithOwner()
                                        .HasForeignKey("TimeStampWeddingComponentDescId");
                                });

                            b1.OwnsOne("Paraglider.Domain.ValueObjects.TimeOfDay", "IntervalStart", b2 =>
                                {
                                    b2.Property<Guid>("TimeStampWeddingComponentDescId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("Hour")
                                        .HasColumnType("integer")
                                        .HasColumnName("IntervalStart_Hour");

                                    b2.Property<int>("Minute")
                                        .HasColumnType("integer")
                                        .HasColumnName("IntervalStart_Minute");

                                    b2.Property<int>("Second")
                                        .HasColumnType("integer")
                                        .HasColumnName("IntervalStart_Second");

                                    b2.HasKey("TimeStampWeddingComponentDescId");

                                    b2.ToTable("WeddingComponentsDesc");

                                    b2.WithOwner()
                                        .HasForeignKey("TimeStampWeddingComponentDescId");
                                });

                            b1.Navigation("ExactTime");

                            b1.Navigation("IntervalEnd");

                            b1.Navigation("IntervalStart");
                        });

                    b.Navigation("TimeStamp")
                        .IsRequired();
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.WeddingPlanning", b =>
                {
                    b.HasOne("Paraglider.Domain.Entities.ApplicationUser", null)
                        .WithMany("WeddingPlannings")
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.Album", b =>
                {
                    b.Navigation("Media");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.ApplicationUser", b =>
                {
                    b.Navigation("ExternalAuthInfo");

                    b.Navigation("WeddingPlannings");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.BanquetHall", b =>
                {
                    b.Navigation("Premises");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.Catering", b =>
                {
                    b.Navigation("Reviews");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.Confectioner", b =>
                {
                    b.Navigation("Reviews");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.Decorator", b =>
                {
                    b.Navigation("Reviews");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.Dj", b =>
                {
                    b.Navigation("Reviews");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.Limousine", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.PhotoStudio", b =>
                {
                    b.Navigation("Reviews");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.Photographer", b =>
                {
                    b.Navigation("Reviews");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.Registrar", b =>
                {
                    b.Navigation("Reviews");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.Stylist", b =>
                {
                    b.Navigation("Reviews");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.Toastmaster", b =>
                {
                    b.Navigation("Reviews");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.Videographer", b =>
                {
                    b.Navigation("Reviews");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.WeddingComponentDesc", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.WeddingPlanning", b =>
                {
                    b.Navigation("BanquetHalls");

                    b.Navigation("Caterings");

                    b.Navigation("Confectioners");

                    b.Navigation("Decorators");

                    b.Navigation("Djs");

                    b.Navigation("Limousines");

                    b.Navigation("PhotoStudios");

                    b.Navigation("Photographers");

                    b.Navigation("Registrars");

                    b.Navigation("SelectedCategories");

                    b.Navigation("Stylists");

                    b.Navigation("Toastmasters");

                    b.Navigation("Videographers");
                });
#pragma warning restore 612, 618
        }
    }
}
