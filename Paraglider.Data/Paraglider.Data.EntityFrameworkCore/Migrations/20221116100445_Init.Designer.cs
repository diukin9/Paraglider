// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Paraglider.Data;

#nullable disable

namespace Paraglider.Data.EntityFrameworkCore.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221116100445_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.Album", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.BanquetHall", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AlbumId")
                        .HasColumnType("uuid");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("ExternalInfoId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("WeddingPlanningId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CityId");

                    b.HasIndex("ExternalInfoId");

                    b.HasIndex("WeddingPlanningId");

                    b.ToTable("BanquetHalls");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("WeddingPlanningId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WeddingPlanningId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.ExternalInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ApplicationUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ExternalProvider")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasAlternateKey("ExternalProvider", "ExternalId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("ExternalInfo");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.Hall", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AlbumId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BanquetHallId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<decimal?>("MinimalPrice")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("BanquetHallId");

                    b.ToTable("Halls");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.Limousine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AlbumId")
                        .HasColumnType("uuid");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text");

                    b.Property<int?>("Capacity")
                        .HasColumnType("integer");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("ExternalInfoId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ManufactureYear")
                        .HasColumnType("timestamp with time zone");

                    b.Property<TimeSpan?>("MinRentLength")
                        .HasColumnType("interval");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("WeddingPlanningId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CityId");

                    b.HasIndex("ExternalInfoId");

                    b.HasIndex("WeddingPlanningId");

                    b.ToTable("Limousines");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.Media", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AlbumId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.ToTable("Medias");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Sum")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("WeddingComponentDescId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WeddingComponentDescId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("BanquetHallId")
                        .HasColumnType("uuid");

                    b.Property<double>("Evaluation")
                        .HasColumnType("double precision");

                    b.Property<Guid?>("LimousineId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SpecialistId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BanquetHallId");

                    b.HasIndex("LimousineId");

                    b.HasIndex("SpecialistId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("SpecialistId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SpecialistId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.Specialist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AlbumId")
                        .HasColumnType("uuid");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("ExternalInfoId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("WeddingPlanningId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CityId");

                    b.HasIndex("ExternalInfoId");

                    b.HasIndex("WeddingPlanningId");

                    b.ToTable("Specialists");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.WeddingComponentDesc", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConfigurationItemId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("WeddingComponentsDesc");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.WeddingPlanning", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ApplicationUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("WeddingPlannings");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Paraglider.Domain.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Paraglider.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Paraglider.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Paraglider.Domain.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Paraglider.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Paraglider.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.ApplicationUser", b =>
                {
                    b.HasOne("Paraglider.Domain.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.BanquetHall", b =>
                {
                    b.HasOne("Paraglider.Domain.Entities.Album", "Album")
                        .WithMany()
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Paraglider.Domain.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Paraglider.Domain.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Paraglider.Domain.Entities.ExternalInfo", "ExternalInfo")
                        .WithMany()
                        .HasForeignKey("ExternalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Paraglider.Domain.Entities.WeddingPlanning", null)
                        .WithMany("BanquetHalls")
                        .HasForeignKey("WeddingPlanningId");

                    b.OwnsOne("Paraglider.Domain.ValueObjects.Contacts", "Contacts", b1 =>
                        {
                            b1.Property<Guid>("BanquetHallId")
                                .HasColumnType("uuid");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("PhoneNumber");

                            b1.HasKey("BanquetHallId");

                            b1.ToTable("BanquetHalls");

                            b1.WithOwner()
                                .HasForeignKey("BanquetHallId");
                        });

                    b.Navigation("Album");

                    b.Navigation("Category");

                    b.Navigation("City");

                    b.Navigation("Contacts")
                        .IsRequired();

                    b.Navigation("ExternalInfo");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.Category", b =>
                {
                    b.HasOne("Paraglider.Domain.Entities.WeddingPlanning", null)
                        .WithMany("SelectedCategories")
                        .HasForeignKey("WeddingPlanningId");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.ExternalInfo", b =>
                {
                    b.HasOne("Paraglider.Domain.Entities.ApplicationUser", null)
                        .WithMany("ExternalAuthInfo")
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.Hall", b =>
                {
                    b.HasOne("Paraglider.Domain.Entities.Album", "Album")
                        .WithMany()
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Paraglider.Domain.Entities.BanquetHall", null)
                        .WithMany("Premises")
                        .HasForeignKey("BanquetHallId");

                    b.OwnsOne("Paraglider.Domain.ValueObjects.Capacity", "Capacity", b1 =>
                        {
                            b1.Property<Guid>("HallId")
                                .HasColumnType("uuid");

                            b1.Property<int?>("Max")
                                .HasColumnType("integer")
                                .HasColumnName("MaxCapacity");

                            b1.Property<int?>("Min")
                                .HasColumnType("integer")
                                .HasColumnName("MinCapacity");

                            b1.HasKey("HallId");

                            b1.ToTable("Halls");

                            b1.WithOwner()
                                .HasForeignKey("HallId");
                        });

                    b.OwnsOne("Paraglider.Domain.ValueObjects.HallRentalPrice", "RentalPrice", b1 =>
                        {
                            b1.Property<Guid>("HallId")
                                .HasColumnType("uuid");

                            b1.Property<decimal?>("PricePerPerson")
                                .HasColumnType("numeric")
                                .HasColumnName("RentalPricePerPerson");

                            b1.Property<decimal?>("RentalPrice")
                                .HasColumnType("numeric")
                                .HasColumnName("RentalPrice");

                            b1.HasKey("HallId");

                            b1.ToTable("Halls");

                            b1.WithOwner()
                                .HasForeignKey("HallId");
                        });

                    b.Navigation("Album");

                    b.Navigation("Capacity")
                        .IsRequired();

                    b.Navigation("RentalPrice")
                        .IsRequired();
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.Limousine", b =>
                {
                    b.HasOne("Paraglider.Domain.Entities.Album", "Album")
                        .WithMany()
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Paraglider.Domain.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Paraglider.Domain.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Paraglider.Domain.Entities.ExternalInfo", "ExternalInfo")
                        .WithMany()
                        .HasForeignKey("ExternalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Paraglider.Domain.Entities.WeddingPlanning", null)
                        .WithMany("Limousines")
                        .HasForeignKey("WeddingPlanningId");

                    b.OwnsOne("Paraglider.Domain.ValueObjects.Contacts", "Contacts", b1 =>
                        {
                            b1.Property<Guid>("LimousineId")
                                .HasColumnType("uuid");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("PhoneNumber");

                            b1.HasKey("LimousineId");

                            b1.ToTable("Limousines");

                            b1.WithOwner()
                                .HasForeignKey("LimousineId");
                        });

                    b.Navigation("Album");

                    b.Navigation("Category");

                    b.Navigation("City");

                    b.Navigation("Contacts")
                        .IsRequired();

                    b.Navigation("ExternalInfo");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.Media", b =>
                {
                    b.HasOne("Paraglider.Domain.Entities.Album", null)
                        .WithMany("Media")
                        .HasForeignKey("AlbumId");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.Payment", b =>
                {
                    b.HasOne("Paraglider.Domain.Entities.WeddingComponentDesc", null)
                        .WithMany("Payments")
                        .HasForeignKey("WeddingComponentDescId");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.Review", b =>
                {
                    b.HasOne("Paraglider.Domain.Entities.BanquetHall", null)
                        .WithMany("Reviews")
                        .HasForeignKey("BanquetHallId");

                    b.HasOne("Paraglider.Domain.Entities.Limousine", null)
                        .WithMany("Reviews")
                        .HasForeignKey("LimousineId");

                    b.HasOne("Paraglider.Domain.Entities.Specialist", null)
                        .WithMany("Reviews")
                        .HasForeignKey("SpecialistId");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.Service", b =>
                {
                    b.HasOne("Paraglider.Domain.Entities.Specialist", null)
                        .WithMany("Services")
                        .HasForeignKey("SpecialistId");

                    b.OwnsOne("Paraglider.Domain.ValueObjects.Price", "Price", b1 =>
                        {
                            b1.Property<Guid>("ServiceId")
                                .HasColumnType("uuid");

                            b1.Property<decimal?>("Max")
                                .HasColumnType("numeric")
                                .HasColumnName("MaxPrice");

                            b1.Property<decimal?>("Min")
                                .HasColumnType("numeric")
                                .HasColumnName("MinPrice");

                            b1.HasKey("ServiceId");

                            b1.ToTable("Services");

                            b1.WithOwner()
                                .HasForeignKey("ServiceId");
                        });

                    b.Navigation("Price")
                        .IsRequired();
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.Specialist", b =>
                {
                    b.HasOne("Paraglider.Domain.Entities.Album", "Album")
                        .WithMany()
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Paraglider.Domain.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Paraglider.Domain.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Paraglider.Domain.Entities.ExternalInfo", "ExternalInfo")
                        .WithMany()
                        .HasForeignKey("ExternalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Paraglider.Domain.Entities.WeddingPlanning", null)
                        .WithMany("Specialists")
                        .HasForeignKey("WeddingPlanningId");

                    b.OwnsOne("Paraglider.Domain.ValueObjects.Contacts", "Contacts", b1 =>
                        {
                            b1.Property<Guid>("SpecialistId")
                                .HasColumnType("uuid");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("PhoneNumber");

                            b1.HasKey("SpecialistId");

                            b1.ToTable("Specialists");

                            b1.WithOwner()
                                .HasForeignKey("SpecialistId");
                        });

                    b.Navigation("Album");

                    b.Navigation("Category");

                    b.Navigation("City");

                    b.Navigation("Contacts")
                        .IsRequired();

                    b.Navigation("ExternalInfo");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.WeddingComponentDesc", b =>
                {
                    b.OwnsOne("Paraglider.Domain.ValueObjects.TimeInterval", "TimeStamp", b1 =>
                        {
                            b1.Property<Guid>("WeddingComponentDescId")
                                .HasColumnType("uuid");

                            b1.Property<TimeOnly?>("IntervalEnd")
                                .HasColumnType("time without time zone")
                                .HasColumnName("IntervalEnd");

                            b1.Property<TimeOnly?>("IntervalStart")
                                .HasColumnType("time without time zone")
                                .HasColumnName("IntervalStart");

                            b1.HasKey("WeddingComponentDescId");

                            b1.ToTable("WeddingComponentsDesc");

                            b1.WithOwner()
                                .HasForeignKey("WeddingComponentDescId");
                        });

                    b.Navigation("TimeStamp")
                        .IsRequired();
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.WeddingPlanning", b =>
                {
                    b.HasOne("Paraglider.Domain.Entities.ApplicationUser", null)
                        .WithMany("WeddingPlannings")
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.Album", b =>
                {
                    b.Navigation("Media");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.ApplicationUser", b =>
                {
                    b.Navigation("ExternalAuthInfo");

                    b.Navigation("WeddingPlannings");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.BanquetHall", b =>
                {
                    b.Navigation("Premises");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.Limousine", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.Specialist", b =>
                {
                    b.Navigation("Reviews");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.WeddingComponentDesc", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Paraglider.Domain.Entities.WeddingPlanning", b =>
                {
                    b.Navigation("BanquetHalls");

                    b.Navigation("Limousines");

                    b.Navigation("SelectedCategories");

                    b.Navigation("Specialists");
                });
#pragma warning restore 612, 618
        }
    }
}
